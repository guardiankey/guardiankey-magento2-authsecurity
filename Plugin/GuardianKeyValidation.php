<?php

namespace GuardianKey\AuthSecurity\Plugin;

use GuardianKey\AuthSecurity\Helper\Data;
use GuardianKey\AuthSecurity\Lib\GuardianKey;

use Magento\Framework\Exception\InvalidEmailOrPasswordException;
use Magento\Framework\Exception\EmailNotConfirmedException;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Psr\Log\LoggerInterface as PsrLogger;

class GuardianKeyValidation
{
    protected $storeManager;
    protected $scopeConfig;
    protected $logger;

    public function __construct(
        StoreManagerInterface $storeManager,
        ScopeConfigInterface $scopeConfig,
        PsrLogger $logger
        )
    {
        $this->storeManager = $storeManager;
        $this->scopeConfig  = $scopeConfig;
        $this->logger       = $logger;
    }

    private function GKObject()
    {
        $config = new Data($this->scopeConfig);
        $GKconfig = array(
            'email'   => $config->getGeneralConfig("support_email_addr"),   /* Admin e-mail */
            'agentid' => $config->getGeneralConfig("organization_id"),  /* ID for the agent (your system) */
            'key'     => $config->getGeneralConfig("key"),     /* Key in B64 to communicate with GuardianKey */
            'iv'      => $config->getGeneralConfig("iv"),      /* IV in B64 for the key */
            'service' => "Magento",      /* Your service name*/
            'orgid'   => $config->getGeneralConfig("organization_id"),   /* Your Org identification in GuardianKey */
            'authgroupid' => $config->getGeneralConfig("authgroup_id"), /* A Authentication Group identification, generated by GuardianKey */
            'reverse' => "True", /* If you will locally perform a reverse DNS resolution */
        );
        return new GuardianKey($GKconfig);
    }

    protected function GKLoginFailed($username)
    {
        $config = new Data($this->scopeConfig);
        if($config->getGeneralConfig("enable"))
        {
            $GK    = $this->GKObject();
            $GKJSONReturn = $GK->checkaccess($username,$username,"1");  
        }
    }


    protected function GKCheckaccess($username)
    {
        $config = new Data($this->scopeConfig);
        if($config->getGeneralConfig("enable"))
        {
            $GK    = $this->GKObject();
            $GKRet = $GK->checkaccess($username,$username,"0");    
            $GKJSONReturn = @json_decode($GKRet); 

            if ($GKJSONReturn->response == 'BLOCK' )
            { 
                if($config->getGeneralConfig("test_mode"))
                {
                    $this->logger->info("GuardianKey recommended to block, but it is under test mode. Access not blocked!");
                }else
                {   // Block the access!
                    throw new InvalidEmailOrPasswordException(__('Invalid login or password.'));
                }
            }elseif($GKJSONReturn->response == 'NOTIFY' || $GKJSONReturn->response == 'HARD_NOTIFY' )
            {
               $this->logger->info(json_encode($GKJSONReturn));

                $baseurl = $this->storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_WEB);

                $datetime = gmdate("Y-m-d\ H:i:s\ ", $GKJSONReturn->generatedTime)." UTC";
                $emailhtml = $config->getGeneralConfig("email_html");
                $emailhtml=str_replace("[USERNAME]",$username,$emailhtml);
                $emailhtml=str_replace("[DATETIME]",$datetime,$emailhtml);
                $emailhtml=str_replace("[LOCATION]",$GKJSONReturn->country,$emailhtml);
                $emailhtml=str_replace("[SYSTEM]",$GKJSONReturn->client_ua."/".$GKJSONReturn->client_os,$emailhtml);
                $emailhtml=str_replace("[IPADDRESS]",$GK->getUserIP(),$emailhtml);
                $emailhtml=str_replace("[TOKEN]",$GKJSONReturn->event_token,$emailhtml);
                $emailhtml=str_replace("[EVENTID]",$GKJSONReturn->eventId,$emailhtml);
                $emailhtml=str_replace("[CHECKURL]",$baseurl."/gk/index/checkpoint?e=".$GKJSONReturn->eventId."&t=".$GKJSONReturn->event_token,$emailhtml);
                $emailhtml=str_replace("[]","",$emailhtml);
                $emailhtml=str_replace("()","",$emailhtml);

                $emailtext = $config->getGeneralConfig("email_text");
                $emailtext=str_replace("[USERNAME]",$username,$emailtext);
                $emailtext=str_replace("[DATETIME]",$datetime,$emailtext);
                $emailtext=str_replace("[LOCATION]",$GKJSONReturn->country,$emailtext);
                $emailtext=str_replace("[SYSTEM]",$GKJSONReturn->client_ua."/".$GKJSONReturn->client_os,$emailtext);
                $emailtext=str_replace("[IPADDRESS]",$GK->getUserIP(),$emailtext);
                $emailtext=str_replace("[TOKEN]",$GKJSONReturn->event_token,$emailtext);
                $emailtext=str_replace("[EVENTID]",$GKJSONReturn->eventId,$emailtext);
                $emailtext=str_replace("[CHECKURL]",$baseurl."/gk/index/checkpoint?e=".$GKJSONReturn->eventId."&t=".$GKJSONReturn->event_token,$emailtext);
                $emailtext=str_replace("[]","",$emailtext);
                $emailtext=str_replace("()","",$emailtext);
                
                $email = new \Zend_Mail('UTF-8');
                $email->setSubject($config->getGeneralConfig("email_subject"));
                $email->setBodyText($emailtext);
                $email->setFrom($config->getGeneralConfig("from_email_addr"));
                $email->setBodyHtml($emailhtml);
                
                if(!$config->getGeneralConfig("test_mode"))
                {
                    $email->addTo($username);
                    if($config->getGeneralConfig("support_email_addr_bcc"))
                    {
                        $email->addBcc($config->getGeneralConfig("support_email_addr"));
                    }
                }else
                {
                    $email->addTo($config->getGeneralConfig("support_email_addr"));
                }
                $email->send();
            }
        }
    }

    public function aroundAuthenticate(\Magento\Customer\Model\AccountManagement $accountManagementObj, callable $proceed, ...$args)
    {
        $username = $args[0];
        try {
            $result = $proceed(...$args);
        } catch (EmailNotConfirmedException $e) {
            $this->GKCheckaccess($username);
            throw $e;
        } catch (\Exception $e) {
            $this->GKLoginFailed($username);
            throw $e;
        }
        try{
            $this->GKCheckaccess($username);
        } catch (InvalidEmailOrPasswordException $e) {
            throw $e;
        }catch (\Exception $e) {   }
        
        return $result;
    }


}